---
import { reference } from "astro:content";

interface Props {
  password: string;
  title: string;
  error_msg: string;
}

const {
  password,
  title = "Please enter password",
  error_msg = "error password",
} = Astro.props;

var renderedHtml = await Astro.slots.render("default");

async function encryptHtml(password: string, html: string) {
  let enc = new TextEncoder();
  let keyMaterial = await crypto.subtle.importKey(
    "raw",
    enc.encode(password),
    { name: "PBKDF2" },
    false,
    ["deriveBits", "deriveKey"],
  );

  let salt = crypto.getRandomValues(new Uint8Array(16));
  let iv = crypto.getRandomValues(new Uint8Array(12));

  let key = await crypto.subtle.deriveKey(
    {
      name: "PBKDF2",
      salt: salt,
      iterations: 100000,
      hash: "SHA-256",
    },
    keyMaterial,
    { name: "AES-GCM", length: 256 },
    true,
    ["encrypt", "decrypt"],
  );

  let encryptedHtml = await crypto.subtle.encrypt(
    {
      name: "AES-GCM",
      iv: iv,
    },
    key,
    enc.encode(html),
  );

  let base64EncryptedHtml = Buffer.from(encryptedHtml).toString("base64");
  let base64IV = Buffer.from(iv).toString("base64");
  let base64Salt = Buffer.from(salt).toString("base64");

  return `${base64EncryptedHtml}_${base64IV}_${base64Salt}`;
}

// async function decryptHtml(password: string, encryptedStr: string) {
//   let enc = new TextEncoder();

//   let encryptStringArray = encryptedStr.split("_");
//   let encryptedHtml = Buffer.from(encryptStringArray[0], "base64");
//   let iv = Buffer.from(encryptStringArray[1], "base64");
//   let salt = Buffer.from(encryptStringArray[2], "base64");

//   let keyMaterial = await crypto.subtle.importKey(
//     "raw",
//     enc.encode(password),
//     { name: "PBKDF2" },
//     false,
//     ["deriveBits", "deriveKey"],
//   );

//   let key = await crypto.subtle.deriveKey(
//     {
//       name: "PBKDF2",
//       salt: salt,
//       iterations: 100000,
//       hash: "SHA-256",
//     },
//     keyMaterial,
//     { name: "AES-GCM", length: 256 },
//     true,
//     ["encrypt", "decrypt"],
//   );

//   let decryptedHtml: any;

//   decryptedHtml = await crypto.subtle
//     .decrypt(
//       {
//         name: "AES-GCM",
//         iv: iv,
//       },
//       key,
//       encryptedHtml,
//     )
//     .catch((e) => {});

//   let dec = new TextDecoder();
//   return dec.decode(decryptedHtml);
// }

renderedHtml = await encryptHtml(password, renderedHtml);

// var decryptedHtml = await decryptHtml(password, renderedHtml)
---

  <div class="h-fit rounded-md border-2 border-dashed my-2">
    <!-- <Fragment set:html={renderedHtml} /> -->
    <div class="encryptedHtml hidden">{renderedHtml}</div>
    <div class="p-3">
      <label
        for="password"
        class="title block mb-1.5 text font-medium text-gray-900">{title}</label
      >
      <input
        type="password"
        id="password"
        class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 outline-blue-500 block w-full p-2.5 mb-1"
      />
      <label class="error_msg block text-sm invisible pb-1 text-red-600"
        >{error_msg}</label
      >
      <button
        class="alert text-white bg-blue-500 hover:bg-blue-600 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2 text-center"
        >确定</button
      >
    </div>
  </div>
<!-- <input type="password" class="passwd" /> -->

<script>
  import { Buffer } from "buffer";

  async function decryptHtml(password: string, encryptedStr: string) {
    let enc = new TextEncoder();

    let encryptStringArray = encryptedStr.split("_");
    let encryptedHtml = Buffer.from(encryptStringArray[0], "base64");
    let iv = Buffer.from(encryptStringArray[1], "base64");
    let salt = Buffer.from(encryptStringArray[2], "base64");

    let keyMaterial = await crypto.subtle.importKey(
      "raw",
      enc.encode(password),
      { name: "PBKDF2" },
      false,
      ["deriveBits", "deriveKey"],
    );

    let key = await crypto.subtle.deriveKey(
      {
        name: "PBKDF2",
        salt: salt,
        iterations: 100000,
        hash: "SHA-256",
      },
      keyMaterial,
      { name: "AES-GCM", length: 256 },
      true,
      ["encrypt", "decrypt"],
    );

    let decryptedHtml: any;

    decryptedHtml = await crypto.subtle.decrypt(
      {
        name: "AES-GCM",
        iv: iv,
      },
      key,
      encryptedHtml,
    );
    // .catch((e: any) => {});

    let dec = new TextDecoder();
    return dec.decode(decryptedHtml);
  }

  // 在页面上找到所有带有 `alert` 类的按钮。
  // 脚本是打包在一起的，每页只包含一次。使用 querySelectorAll 确保此脚本将事件侦听器附加到页面上找到的具有 alert 类的每个按钮。
  const buttons = document.querySelectorAll("button.alert");

  // 处理每个按钮上的点击事件。
  buttons.forEach((button) => {
    button.addEventListener("click", async () => {
      let parentElement = button.parentElement?.parentElement as HTMLElement;
      let inputPassword = (
        parentElement.querySelector("#password") as HTMLInputElement
      ).value;
      let renderedHtml = parentElement.querySelector(".encryptedHtml")
        ?.innerHTML as string;

      try {
        let decryptedHtml = await decryptHtml(inputPassword, renderedHtml);
        let elem = document.createElement("div");
        elem.innerHTML = decryptedHtml;
        button.parentElement?.replaceChildren(elem);
      } catch {
        let errorMsgHtml = parentElement.querySelector(
          ".error_msg",
        ) as HTMLElement;
        errorMsgHtml.style.visibility = "visible";
      }
    });
  });
</script>
